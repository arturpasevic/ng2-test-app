/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@swimlane/ngx-datatable/release/directives/long-press.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import3 from '@angular/core/src/linker/view_utils';
export var Wrapper_LongPressDirective = (function () {
    function Wrapper_LongPressDirective() {
        this._changed = false;
        this.context = new import0.LongPressDirective();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
    }
    Wrapper_LongPressDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_LongPressDirective.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
    };
    Wrapper_LongPressDirective.prototype.check_duration = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.duration = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_LongPressDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_LongPressDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_1 = this.context.press;
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementClass(el, 'press', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this.context.isLongPress;
        if (import3.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            view.renderer.setElementClass(el, 'longpress', currVal_2);
            this._expr_2 = currVal_2;
        }
    };
    Wrapper_LongPressDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'mousedown')) {
            var pd_sub_0 = (this.context.onMouseDown($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'mousemove')) {
            var pd_sub_1 = (this.context.onMouseMove($event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'mouseup')) {
            var pd_sub_2 = (this.context.onMouseUp() !== false);
            result = (pd_sub_2 && result);
        }
        return result;
    };
    Wrapper_LongPressDirective.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.longPress.subscribe(_eventHandler.bind(view, 'longPress')));
        }
        if (emit1) {
            (this.subscription1 = this.context.longPressing.subscribe(_eventHandler.bind(view, 'longPressing')));
        }
        if (emit2) {
            (this.subscription2 = this.context.longPressEnd.subscribe(_eventHandler.bind(view, 'longPressEnd')));
        }
    };
    return Wrapper_LongPressDirective;
}());
//# sourceMappingURL=long-press.directive.ngfactory.js.map