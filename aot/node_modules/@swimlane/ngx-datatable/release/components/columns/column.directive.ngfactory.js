/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@swimlane/ngx-datatable/release/components/columns/column.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import3 from '@angular/core/src/linker/view_utils';
export var Wrapper_DataTableColumnDirective = (function () {
    function Wrapper_DataTableColumnDirective() {
        this._changed = false;
        this.context = new import0.DataTableColumnDirective();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
        this._expr_6 = import1.UNINITIALIZED;
        this._expr_7 = import1.UNINITIALIZED;
        this._expr_8 = import1.UNINITIALIZED;
        this._expr_9 = import1.UNINITIALIZED;
        this._expr_10 = import1.UNINITIALIZED;
        this._expr_11 = import1.UNINITIALIZED;
        this._expr_12 = import1.UNINITIALIZED;
        this._expr_13 = import1.UNINITIALIZED;
        this._expr_14 = import1.UNINITIALIZED;
        this._expr_15 = import1.UNINITIALIZED;
        this._expr_16 = import1.UNINITIALIZED;
        this._expr_17 = import1.UNINITIALIZED;
    }
    Wrapper_DataTableColumnDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_DataTableColumnDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_DataTableColumnDirective.prototype.check_name = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.name = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_prop = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.prop = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_frozenLeft = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.frozenLeft = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_frozenRight = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.frozenRight = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_flexGrow = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.flexGrow = currValue;
            this._expr_4 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_resizeable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context.resizeable = currValue;
            this._expr_5 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_comparator = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_6, currValue))) {
            this._changed = true;
            this.context.comparator = currValue;
            this._expr_6 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_pipe = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_7, currValue))) {
            this._changed = true;
            this.context.pipe = currValue;
            this._expr_7 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_sortable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_8, currValue))) {
            this._changed = true;
            this.context.sortable = currValue;
            this._expr_8 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_draggable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_9, currValue))) {
            this._changed = true;
            this.context.draggable = currValue;
            this._expr_9 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_canAutoResize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_10, currValue))) {
            this._changed = true;
            this.context.canAutoResize = currValue;
            this._expr_10 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_minWidth = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_11, currValue))) {
            this._changed = true;
            this.context.minWidth = currValue;
            this._expr_11 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_width = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_12, currValue))) {
            this._changed = true;
            this.context.width = currValue;
            this._expr_12 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_maxWidth = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_13, currValue))) {
            this._changed = true;
            this.context.maxWidth = currValue;
            this._expr_13 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_checkboxable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_14, currValue))) {
            this._changed = true;
            this.context.checkboxable = currValue;
            this._expr_14 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_headerCheckboxable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_15, currValue))) {
            this._changed = true;
            this.context.headerCheckboxable = currValue;
            this._expr_15 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_cellTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_16, currValue))) {
            this._changed = true;
            this.context.cellTemplate = currValue;
            this._expr_16 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.check_headerTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_17, currValue))) {
            this._changed = true;
            this.context.headerTemplate = currValue;
            this._expr_17 = currValue;
        }
    };
    Wrapper_DataTableColumnDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_DataTableColumnDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_DataTableColumnDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_DataTableColumnDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_DataTableColumnDirective;
}());
//# sourceMappingURL=column.directive.ngfactory.js.map